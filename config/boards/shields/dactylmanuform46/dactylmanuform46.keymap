#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SYM     1
#define NAV     2
#define FNC     3

#define L_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 38 39 40 41
#define R_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 34 35 36 37 42 43 44 45

/ {  
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < L_KEYS >; 
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < R_KEYS >; 
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q  &kp W        &kp F        &kp P        &kp B             &kp J       &kp L        &kp U        &kp Y        &kp SEMI
                &kp A  &hml LGUI R  &hml RCTRL S &hml LSHFT T &hml LALT G       &hmr LALT M &hmr RSHFT N &hmr RCTRL E &hmr RGUI I  &kp O
                &kp Z  &kp X        &kp C        &kp D        &kp V             &kp K       &kp H        &kp COMMA    &kp DOT      &kp FSLH
                       &trans       &kp MINUS    &kp RET      &kp ESC           &kp BSPC    &kp SPACE    &kp PLUS     &kp EQUAL
                       &kp RALT     &mo FNC      &kp TAB      &mo NAV           &mo SYM     &kp TAB      &mo FNC      &kp RALT
            >;
        }; 

        symbols_layer {
            bindings = <
                &kp N1    &kp N2   &kp N3    &kp N4   &kp N5          &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
                &kp EXCL  &kp AT   &kp HASH  &kp DLLR &kp PRCNT       &kp CARET &kp AMPS  &kp STAR  &kp APOS  &kp DQT
                &kp TILDE &kp PIPE &kp LBKT  &kp LPAR &kp LBRC        &kp RBRC  &kp RPAR  &kp RBKT  &kp GRAVE &kp BSLH
                          &kp LT   &kp UNDER &kp RET  &kp ESC         &trans    &trans    &kp PLUS  &kp GT
                          &trans   &trans    &trans   &trans          &trans    &trans    &trans    &trans
            >;
        };

        navigation_layer {
            bindings = <
                &trans  &kp C_NEXT &kp C_PLAY  &kp C_VOL_UP &kp C_BRI_UP          &kp PG_UP  &kp HOME &kp UP   &kp END   &trans
                &trans  &kp C_PREV &kp C_PAUSE &kp C_VOL_DN &kp C_BRI_DN          &kp PG_DN  &kp LEFT &kp DOWN &kp RIGHT &trans
                &trans  &trans     &trans      &kp C_MUTE   &trans                &trans     &trans   &trans   &trans    &trans
                &trans  &trans     &trans      &trans                             &kp DEL    &kp TAB  &trans   &trans
                &trans  &trans     &trans      &trans                             &trans     &trans   &trans   &trans
            >;
        };

        function_layer {
            bindings = <
                &kp F1       &kp F2       &kp F3       &kp F4       &kp F5        &kp F6     &kp F7       &kp F8       &kp F9        &kp F10
                &kp F11      &kp F12      &kp F13      &kp F14      &kp F15       &kp F16    &kp F17      &kp F18      &kp F19       &kp F20
                &out OUT_TOG &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_CLR    &trans     &trans       &trans       &trans        &trans 
                             &trans       &trans       &trans       &trans        &trans     &trans       &kp K_CALC   &kp PSCRN
                             &trans       &trans       &trans       &trans        &trans     &trans       &trans       &trans
            >;
        };
    };
};
